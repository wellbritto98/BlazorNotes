@page "/Note"
@using BlazorNotesMobile.Models.Home
@inject IModalService ModalService
@inject IToastService toastService
@inject IJSRuntime JSRuntime

<div class="note">
    <InputTextCustom @bind-Value="@Title" id="title-input" Disabled="@isDisabled" style="font-weight: bold; font-size: 24px;"/>
    <InputTextCustom @bind-Value="@Subhead" id="subhead-input" Disabled="@isDisabled"/>
    <TextAreaCustom @bind-Value="@Content" id="content-input" Disabled="@isDisabled"/>
    <div class="action-buttons">
        @if (isEditing)
        {
            <ButtonComponent @onclick="ConfirmEdit">Salvar</ButtonComponent>
        }
        else
        {
            <a @onclick="EnableEditing">
                <i class="fas fa-edit"></i>
            </a>

            <a  @onclick="ShowDeleteConfirmation">
                <i class="fas fa-trash"></i>
            </a>
        }
    </div>

</div>


@code {

    [Parameter]
    public EventCallback<NoteModel> OnNoteEdited { get; set; }
    
    [Parameter]
    public EventCallback<NoteModel> OnNoteRemoved { get; set; }

    
    [Parameter]
    public string NoteId { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string Subhead { get; set; }

    [Parameter]
    public string Content { get; set; }
    
    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    public bool isDisabled { get; set; } = true;
    public bool isEditing { get; set; } = false;

    public void EnableEditing()
    {
        isDisabled = false;
        isEditing = true;
    }
    
    public async void ConfirmEdit()
    {
        isDisabled = true;
        isEditing = false;
        var updatedNote = new NoteModel
        {
            NoteId = NoteId,
            Title = Title,
            Subhead = Subhead,
            Content = Content
        };
        /*window.updateNote = async function (noteId, title, subtitle, content) {*/
        bool success = await JSRuntime.InvokeAsync<bool>("updateNote", NoteId, Title, Subhead, Content);
        if (success)
        {
           await OnNoteEdited.InvokeAsync(updatedNote);
             toastService.ShowSuccess("Note saved successfully");
        }
        else
        {
            toastService.ShowError("Error saving note");
        }

    }
    
    public void ShowDeleteConfirmation()
    {
        var parameters = new ModalParameters();
        parameters.Add("NoteId", NoteId);
        parameters.Add("OnNoteRemoved", new EventCallback(this, RemoveNote));
        ModalService.Show<DeleteNoteConfirm>("Delete Note",parameters: parameters);
    }

    public  void RemoveNote()
    {
        var deletedNote = new NoteModel
        {
            NoteId = NoteId,
            Title = Title,
            Subhead = Subhead,
            Content = Content
        };
        OnNoteRemoved.InvokeAsync(deletedNote);
        toastService.ShowSuccess("Nota deletada com sucesso");
        BlazoredModal.CloseAsync();
        
    }



}