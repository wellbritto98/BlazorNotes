@page "/login"
@using System.ComponentModel.DataAnnotations
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IToastService toastService


<PageTitle>BlazorNotes</PageTitle>
<div class="login-page">
    <div class="login-content">

        <EditForm Model="@model">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-login">


                <label for="email-input">
                    Email:
                </label>
                <InputTextCustom @bind-Value="@model.Email" id="email-input"> </InputTextCustom>

                <label for="senha-input">
                    Senha:
                </label>
                <InputTextCustom type="password" @bind-Value="@model.Password" id="senha-input"> </InputTextCustom>


                <ButtonComponent @onclick="SubmitForm">Sign In</ButtonComponent>
            </div>
        </EditForm>

        <div class="login-links">
            <a @onclick="OpenRegisterModal">Register</a>
        </div>
    </div>

</div>
@inject IModalService ModalService
@code
{
    private LoginModel model = new LoginModel();

    public async Task SubmitForm()
    {
        var result = await JSRuntime.InvokeAsync<bool>("signIn", model.Email, model.Password);

        if (result)
        {
            toastService.ShowSuccess("Logado com sucesso !");
            NavigationManager.NavigateTo("/");
        }
        else
        {
            toastService.ShowError("Usuario ou senha invalidos !");
        }
    }


    protected override async Task OnInitializedAsync()
    {
        bool isAuthenticated = await JSRuntime.InvokeAsync<bool>("authStateChanged");

        if (isAuthenticated)
        {
            NavigationManager.NavigateTo("/", true);
        }

    }



    public void OpenRegisterModal()
    {

        ModalService.Show<RegisterModal>("Register");
    }

    public class LoginModel
    {
        [Required]
        public string? Email { get; set; }
        [Required]
        [DataType(DataType.Password)]
        public string? Password { get; set; }
    }
}