@page "/"
@using Newtonsoft.Json
@using System.Text.Json
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IToastService toastService
@inject ILocalStorageService localStorage
@inject HttpClient Http
@using Models.Home


<PageTitle>BlazorNotes</PageTitle>
<div class="home-content">
    @if (noteList == null)
    {
        <CustomSpinner />
    }
    else if (noteList.Notes.Count > 0)
    {



        foreach (var note in noteList.Notes)
        {
            <CardNote Title="@note.Title" SubTitle="@note.Subhead" Content="@note.Content" />
        }
    }
    else
    {
        <h5>
            Poxa! Parece que não há nenhuma nota.🙁 Que tal adicionar sua primeira nota ? 😊
        </h5>
    }
    <FloatingActionButton />
</div>

@code {
    // Definindo noteList como uma propriedade da classe
    public NoteList noteList { get; set; }

    public async Task GetNewNote()
    {
        var newNoteStorage = await localStorage.GetItemAsStringAsync("newNote");
        if (!string.IsNullOrEmpty(newNoteStorage))
        {
            var note = JsonConvert.DeserializeObject<NoteModel>(newNoteStorage);
            noteList.Notes.Add(note);
            await localStorage.RemoveItemAsync("newNote");
        }
        else
        {
            return;
        }
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await GetNewNote();
        return;
    }
    protected override async Task OnInitializedAsync()
    {
        // subscribe to OnMessage event

        var authKey = "firebase:authUser:AIzaSyDdrz5LgykDBpxBsRf9-C59PhJ0w1Weda0:[DEFAULT]";
        var userDataJson = await localStorage.GetItemAsStringAsync(authKey);

        if (string.IsNullOrEmpty(userDataJson))
        {
            HandleError("Dados do usuário não estão disponíveis no localStorage.");
            return;
        }

        var userId = GetUserIdFromJson(userDataJson);
        if (string.IsNullOrEmpty(userId))
        {
            HandleError("UID do usuário não encontrado.");
            return;
        }

        var notes = await RetrieveNotes(userId);
        if (notes == null)
        {
            return; // O tratamento de erro já foi feito dentro do método RetrieveNotes
        }

        noteList = new NoteList { Notes = notes };
    }

    private void HandleError(string errorMessage)
    {
        Console.WriteLine(errorMessage);
    }

    private string GetUserIdFromJson(string userDataJson)
    {
        using var document = JsonDocument.Parse(userDataJson);
        var root = document.RootElement;
        return root.TryGetProperty("uid", out var uidElement) ? uidElement.GetString() : null;
    }

    private async Task<List<NoteModel>> RetrieveNotes(string userId)
    {
        var baseUrl = "https://firestore.googleapis.com/v1";
        var projectId = "blazor-notes";
        var collectionName = "notes";
        var documentName = "users";
        var url = $"{baseUrl}/projects/{projectId}/databases/(default)/documents/{documentName}/{userId}/{collectionName}";

        var response = await Http.GetAsync(url);
        if (!response.IsSuccessStatusCode)
        {
            HandleError($"Falha ao recuperar as notas. Status: {response.StatusCode}");
            return null;
        }

        var responseJson = await response.Content.ReadAsStringAsync();
        var rootObject = JsonConvert.DeserializeObject<RootObject>(responseJson);
        return rootObject.Documents.Select(d => new NoteModel
            {
                NoteId = d.Name.Split('/').Last(),
                Title = d.Fields.Title.Value,
                Subhead = d.Fields.Subhead.Value,
                Content = d.Fields.Content.Value,
                CreateTime = d.CreateTime,
                UpdateTime = d.UpdateTime
            }).ToList();
    }



}

